{
	"compiler": {
		"version": "0.8.30+commit.73712a01"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newEndTime",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "lastBidder",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "lastBidAmount",
						"type": "uint256"
					}
				],
				"name": "AuctionExtended",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "winnerBidder",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "winnerBid",
						"type": "uint256"
					}
				],
				"name": "AuctionFinished",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "bidder",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "NewBid",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "bidder",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "withdrawnAmount",
						"type": "uint256"
					}
				],
				"name": "PartialWithdraw",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "bidder",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "refundAmount",
						"type": "uint256"
					}
				],
				"name": "Refund",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "allowedIncrement",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "bid",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "duration",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "endTime",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "extension",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "gasFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getBids",
				"outputs": [
					{
						"components": [
							{
								"components": [
									{
										"internalType": "address",
										"name": "bidder",
										"type": "address"
									},
									{
										"internalType": "uint256",
										"name": "amount",
										"type": "uint256"
									}
								],
								"internalType": "struct Auction.Bid",
								"name": "bid",
								"type": "tuple"
							},
							{
								"internalType": "uint256",
								"name": "pendingWithdraw",
								"type": "uint256"
							}
						],
						"internalType": "struct Auction.BidRecord[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getTimeLeft",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getWinnerBid",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "bidder",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}
						],
						"internalType": "struct Auction.Bid",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "partialWithraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "refundAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "startTime",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Fernando Malaspina",
			"details": "Auction rules: - Bids must be at least 5% higher than the current highest bid. - The base price for the auction is 1 ether. - Auction duration is initially set to 1 hour. - The auction is extended by 10 minutes with every valid new bid made in the last 10 minutes.   This allows other bidders enough time to respond.",
			"events": {
				"AuctionExtended(uint256,address,uint256)": {
					"params": {
						"lastBidAmount": "Amount of the triggering bid.",
						"lastBidder": "Address of the bidder who triggered the extension.",
						"newEndTime": "Updated auction end time."
					}
				},
				"AuctionFinished(address,uint256)": {
					"params": {
						"winnerBid": "Value of the winning bid in wei.",
						"winnerBidder": "Address of the auction winner."
					}
				},
				"NewBid(address,uint256)": {
					"params": {
						"amount": "Amount of the bid in wei.",
						"bidder": "Address of the wallet that placed the bid."
					}
				},
				"PartialWithdraw(address,uint256)": {
					"params": {
						"bidder": "Address of the bidder.",
						"withdrawnAmount": "Amount withdrawn in wei."
					}
				},
				"Refund(address,uint256)": {
					"params": {
						"bidder": "Address of the bidder.",
						"refundAmount": "Amount refunded in wei."
					}
				}
			},
			"kind": "dev",
			"methods": {
				"bid()": {
					"details": "Reverts if bid is not at least 5% higher or if sender is current highest bidder."
				},
				"getBids()": {
					"returns": {
						"_0": "A list of BidRecord structs containing each bidder's data."
					}
				},
				"getTimeLeft()": {
					"returns": {
						"_0": "Time left in seconds."
					}
				},
				"getWinnerBid()": {
					"returns": {
						"_0": "Struct Bid containing the highest bidder and bid amount."
					}
				}
			},
			"title": "Public auction for generic assets",
			"version": 1
		},
		"userdoc": {
			"events": {
				"AuctionExtended(uint256,address,uint256)": {
					"notice": "Emitted when the auction is extended due to a new bid."
				},
				"AuctionFinished(address,uint256)": {
					"notice": "Emitted when the auction ends via the owner's refund action."
				},
				"NewBid(address,uint256)": {
					"notice": "Emitted when a new valid bid is placed."
				},
				"PartialWithdraw(address,uint256)": {
					"notice": "Emitted when a bidder performs a partial withdrawal during the auction."
				},
				"Refund(address,uint256)": {
					"notice": "Emitted when a bidder receives a refund."
				}
			},
			"kind": "user",
			"methods": {
				"allowedIncrement()": {
					"notice": "Required percentage increment (e.g., 5%) for a bid to be accepted."
				},
				"bid()": {
					"notice": "Places a new bid if it complies with the rules."
				},
				"duration()": {
					"notice": "Total duration of the auction."
				},
				"endTime()": {
					"notice": "End time of the auction. Can be extended during the auction."
				},
				"extension()": {
					"notice": "Time extension applied if a bid is placed within the last 10 minutes."
				},
				"gasFee()": {
					"notice": "Fee percentage (e.g., 2%) deducted from bid refunds for gas compensation."
				},
				"getBids()": {
					"notice": "Returns all bids in structured format."
				},
				"getTimeLeft()": {
					"notice": "Returns the remaining time before the auction ends."
				},
				"getWinnerBid()": {
					"notice": "Returns the current highest bid and bidder."
				},
				"owner()": {
					"notice": "Owner of the contract."
				},
				"partialWithraw()": {
					"notice": "Allows bidders to partially withdraw previous bids (not the latest one).         No gas fee is deducted. Can only be done during the auction."
				},
				"refundAll()": {
					"notice": "Allows the owner to refund all bidders at the end of the auction.         The winner receives only their pendingWithdraw amount - 2%.         Others receive their pendingWithdraw + (bid - 2% fee)."
				},
				"startTime()": {
					"notice": "Start time of the auction."
				}
			},
			"notice": "This contract allows users to participate in an auction.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"Auction.sol": "Auction"
		},
		"evmVersion": "prague",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"Auction.sol": {
			"keccak256": "0xd52436af323d44b62982bd5812a4dcde6f9017c12f3a68ec0a616689c544a10a",
			"license": "MIT",
			"urls": [
				"bzz-raw://58a51f2811c955ba10ab34ba80772860d069e29bcbe5f8d7dd5ca9321d14a4a4",
				"dweb:/ipfs/QmRomcnfYvro43PReJyN3TpeoBHZtx22Lm6w8aQKMKMkPL"
			]
		}
	},
	"version": 1
}